{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b591781-8700-409c-bf24-a9558bddb715",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1 - Loading the IMDB dataset\n",
    "\n",
    "from tensorflow.keras.datasets import imdb\n",
    "(train_date, train_labels), (test_data, test_labels) = imdb.load_data(\n",
    "    num_words=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d623a0ad-a184-46a1-be9c-e9dea5a77cbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 2 - one hot encoding\n",
    "\n",
    "import numpy as np\n",
    "def vectorize_sequence(sequences, dimension=10000):\n",
    "    results = np.zeros((len(sequences), dimension))\n",
    "    for i, sequence in enumerate(sequences:)\n",
    "        for j in sequence:\n",
    "            results[i, j] = 1.\n",
    "        return results\n",
    "    \n",
    "    # vectorized samples\n",
    "x_train = vectorize_sequences(train_data)\n",
    "x_test = vectorize_sequences(test_data)\n",
    "\n",
    "    # also vectorize the labels\n",
    "y_train = np.asarray(train_labels).astype(\"float32\")\n",
    "y_test = np.asarray(test_labels).astype(\"float32\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf173dc1-f9b5-4297-a395-8bbf61202ce5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 3 - Defining the model\n",
    "\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "model = keras.Sequential([\n",
    "    layers.Dense(16, activation=\"relu\"),\n",
    "    layers.Dense(16, activation=\"relu\"),\n",
    "    layers.Dense(1, activation=\"sigmoid\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cb56257-c3f8-4294-ba9e-52eb3f1a0973",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 4 - Setting aside a validation set\n",
    "\n",
    "x_val = x_train[:10000]\n",
    "partial_x_train = x_train[10000:]\n",
    "y_val = y_train[:10000]\n",
    "partial_y_train = y_train[10000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c26a970-ec1d-4aa4-8ca8-7393d0c1430d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 5a - Compiling the model\n",
    "\n",
    "model.compile(optimizer=\"rmsprop\",\n",
    "             loss=\"binary_crossentropy\",\n",
    "             metrics=[\"accuracy\"])\n",
    "\n",
    "# Step 5b - Training your model\n",
    "\n",
    "history = model.fit(partial_x_train,\n",
    "                    partial_y_train,\n",
    "                    epochs=20,\n",
    "                    batch_size=512,\n",
    "                    validation_data=(x_val, y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e16d96cc-8ace-4ff3-ba5d-112ed7f4b8e1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
